#! /usr/bin/env node

var path = require('path');
var fs = require('fs');
var jspack = require('../lib/main');

var cmd = process.cwd();

var optimist = require('optimist').
    options('h', {
        alias: 'help'
    }).
    options('?', {
        alias: 'help',
        describe: 'Show all the options!'
    }).
    options('p', {
        alias: 'pack',
        describe: 'pack the project start at {mainPath}.'
    });

/**
 * 是否函数
 * @param obj
 * @return {boolean}
 */
var isFunction = function (obj) {
    return Object.prototype.toString.call(obj) === '[object Function]';
};
/**
 * 分发命令的类
 * @param optimist
 * @constructor
 */
var Dispatcher = function (optimist) {
    this.optimist = optimist;
};

Dispatcher.prototype = {
    constructor: Dispatcher,
    run: function () {
        var ops = this.optimist.argv;
        for (var type in ops) {
            if (ops.hasOwnProperty(type) && isFunction(Dispatcher.handlers[type])) {
                Dispatcher.handlers[type].bind(this)(ops[type]);
            }
        }
    }
};

/**
 * 命令对应的处理函数
 * @type {{help: Function, generate: Function}}
 */
Dispatcher.handlers = {
    /**
     * 帮助文件
     * @param data
     */
    'help': function (data) {
        if (data) {
            console.log(this.optimist.help());
        }
    },
    /**
     * todo:现在只有第一个参数起作用
     * @param mainModule
     * @param output
     * @param moduleName
     * @param rootPath
     * @param config
     */
    'pack': function (mainModule, output, moduleName, rootPath, config) {
        var configs;
        if (config) {
            configs = require(path.resolve(cmd, config));
        }
        jspack.pack(path.resolve(cmd, mainModule),
            output || (cmd + "/dist"),
            moduleName || "business",
            rootPath || cmd,
            configs
        );
    }
};

/**
 * 执行分发命令
 */
new Dispatcher(optimist).run();


